// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/domain/album/service.go

// Package mock_album is a generated GoMock package.
package album

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockStorageRepository is a mock of StorageRepository interface.
type MockStorageRepository struct {
	ctrl     *gomock.Controller
	recorder *MockStorageRepositoryMockRecorder
}

// MockStorageRepositoryMockRecorder is the mock recorder for MockStorageRepository.
type MockStorageRepositoryMockRecorder struct {
	mock *MockStorageRepository
}

// NewMockStorageRepository creates a new mock instance.
func NewMockStorageRepository(ctrl *gomock.Controller) *MockStorageRepository {
	mock := &MockStorageRepository{ctrl: ctrl}
	mock.recorder = &MockStorageRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageRepository) EXPECT() *MockStorageRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockStorageRepository) Add(album Album) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", album)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockStorageRepositoryMockRecorder) Add(album interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockStorageRepository)(nil).Add), album)
}

// GetAll mocks base method.
func (m *MockStorageRepository) GetAll() []Album {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]Album)
	return ret0
}

// GetAll indicates an expected call of GetAll.
func (mr *MockStorageRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockStorageRepository)(nil).GetAll))
}

// GetByID mocks base method.
func (m *MockStorageRepository) GetByID(albumID string) (*Album, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", albumID)
	ret0, _ := ret[0].(*Album)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockStorageRepositoryMockRecorder) GetByID(albumID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockStorageRepository)(nil).GetByID), albumID)
}

// MockCurrencyService is a mock of CurrencyService interface.
type MockCurrencyService struct {
	ctrl     *gomock.Controller
	recorder *MockCurrencyServiceMockRecorder
}

// MockCurrencyServiceMockRecorder is the mock recorder for MockCurrencyService.
type MockCurrencyServiceMockRecorder struct {
	mock *MockCurrencyService
}

// NewMockCurrencyService creates a new mock instance.
func NewMockCurrencyService(ctrl *gomock.Controller) *MockCurrencyService {
	mock := &MockCurrencyService{ctrl: ctrl}
	mock.recorder = &MockCurrencyServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCurrencyService) EXPECT() *MockCurrencyServiceMockRecorder {
	return m.recorder
}

// GetUSDPrice mocks base method.
func (m *MockCurrencyService) GetUSDPrice() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUSDPrice")
	ret0, _ := ret[0].(float64)
	return ret0
}

// GetUSDPrice indicates an expected call of GetUSDPrice.
func (mr *MockCurrencyServiceMockRecorder) GetUSDPrice() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUSDPrice", reflect.TypeOf((*MockCurrencyService)(nil).GetUSDPrice))
}
