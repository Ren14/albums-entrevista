// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/rest/writer/handler.go

// Package mock_writer is a generated GoMock package.
package writer

import (
	reflect "reflect"

	album "github.com/rontivero/entrevistatecnica/pkg/domain/album"
	gomock "go.uber.org/mock/gomock"
)

// MockAlbumService is a mock of AlbumService interface.
type MockAlbumService struct {
	ctrl     *gomock.Controller
	recorder *MockAlbumServiceMockRecorder
}

// MockAlbumServiceMockRecorder is the mock recorder for MockAlbumService.
type MockAlbumServiceMockRecorder struct {
	mock *MockAlbumService
}

// NewMockAlbumService creates a new mock instance.
func NewMockAlbumService(ctrl *gomock.Controller) *MockAlbumService {
	mock := &MockAlbumService{ctrl: ctrl}
	mock.recorder = &MockAlbumServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAlbumService) EXPECT() *MockAlbumServiceMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockAlbumService) Add(album album.Album) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", album)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockAlbumServiceMockRecorder) Add(album interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockAlbumService)(nil).Add), album)
}
